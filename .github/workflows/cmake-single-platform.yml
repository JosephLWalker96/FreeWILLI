name: CMake Build and Integration Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allows manual triggering

env:
  BUILD_TYPE: Release

jobs:
  Ubuntu:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
          fetch-depth: 0  # ðŸ‘ˆ This ensures the full Git history (including .git)
    
    - name: Include submodules
      run: git submodule update --init --recursive

    # Integration Test Step
    - name: Pull Docker Image
      run: docker pull josephlwalker96/freewilli-exec:latest

    #- name: Run Clang-Tidy
    #  run: |
    #    docker run --rm -v ${{ github.workspace }}:/app -w /app/listener_program josephlwalker96/freewilli-exec \
    #      bash -c '
    #        cmake -S . -B out -DCMAKE_EXPORT_COMPILE_COMMANDS=ON &&
    #        run-clang-tidy.py -p out -j $(nproc) $(find ./src -name "*.cpp")'
    
    - name: Run Clang-Tidy on changed files
      run: |
        docker run --rm -v ${{ github.workspace }}:/app -w /app josephlwalker96/freewilli-exec bash -c '
          git config --global --add safe.directory /app &&
          git fetch origin main &&
          cd listener_program &&
          cmake -S . -B out -DCMAKE_EXPORT_COMPILE_COMMANDS=ON &&
          CHANGED_FILES=$(git diff --diff-filter=ACMRT --name-only HEAD^ -- "*.cpp" "*.hpp" | grep "^src/" || true) &&
          if [ -n "$CHANGED_FILES" ]; then
            echo "Linting changed files:" $CHANGED_FILES &&
            run-clang-tidy.py -p out -j $(nproc) $CHANGED_FILES
          else
            echo "No .cpp/.hpp files changed in src/"
          fi
        '


    - name: Run Integration Test
      run: |
        docker run --rm -v ${{ github.workspace }}:/app -w /app josephlwalker96/freewilli-exec ./integration_testing/test_integration.sh


  MacOS:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: brew install fftw openblas eigen nlohmann-json libomp

      
      - name: Download ONNX Runtime
        run: |
          curl -L -o onnxruntime-osx-arm64-1.19.2.tgz https://github.com/microsoft/onnxruntime/releases/download/v1.19.2/onnxruntime-osx-arm64-1.19.2.tgz
          tar -xzf onnxruntime-osx-arm64-1.19.2.tgz
      
          # Copy the headers and libraries to the standard macOS directories
          sudo mkdir -p /usr/local/include/onnxruntime /usr/local/lib
          sudo cp -r onnxruntime-osx-arm64-1.19.2/include/* /usr/local/include/onnxruntime/
          sudo cp -r onnxruntime-osx-arm64-1.19.2/lib/* /usr/local/lib/
      
      - name: Set environment variables for ONNX Runtime
        run: |
          echo "CPLUS_INCLUDE_PATH=/usr/local/include/onnxruntime" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:\$LD_LIBRARY_PATH" >> $GITHUB_ENV

          
      - name: Include submodules
        run: git submodule update --init --recursive
      
      - name: Configure CMake
        working-directory: ${{github.workspace}}/listener_program
        run: |
          mkdir -p build
          cmake -B ${{github.workspace}}/listener_program/build -S ${{github.workspace}}/listener_program \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=/usr/bin/clang \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
            -DCMAKE_CXX_FLAGS="-Xpreprocessor -fopenmp -I/opt/homebrew/opt/libomp/include" \
            -DCMAKE_EXE_LINKER_FLAGS="-L/opt/homebrew/opt/libomp/lib -lomp"
           
      - name: Build
        working-directory: ${{github.workspace}}/listener_program
        run: |
          # Get the number of available cores
          CORES=$(sysctl -n hw.ncpu)
          # Build your program with all available cores
          cmake --build ${{github.workspace}}/listener_program/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/listener_program/bin
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./UnitTests