# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Add this line to support manual triggering

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      #run: sudo apt-get update && sudo apt-get install -y libfftw3-dev libblas-dev libeigen3-dev
      run: sudo apt-get update && sudo apt-get install -y libfftw3-dev libblas-dev libeigen3-dev nlohmann-json3-dev

    - name: Download ONNX Runtime
      run: |
        wget https://github.com/microsoft/onnxruntime/releases/download/v1.14.1/onnxruntime-linux-x64-1.14.1.tgz
        tar -xzf onnxruntime-linux-x64-1.14.1.tgz
        sudo cp -r onnxruntime-linux-x64-1.14.1/include/* /usr/local/include/
        sudo cp -r onnxruntime-linux-x64-1.14.1/lib/* /usr/local/lib/

    - name: Include submodules
      run: git submodule update --init --recursive

    - name: Configure CMake
      working-directory: ${{github.workspace}}/listener_program
      run: |
        # Create the build directory
        mkdir -p build
        # Run CMake configuration
        cmake -B ${{github.workspace}}/listener_program/build -S ${{github.workspace}}/listener_program \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_C_COMPILER=/usr/bin/gcc \
          -DCMAKE_CXX_COMPILER=/usr/bin/g++

    #- name: Build
    #  working-directory: ${{github.workspace}}/listener_program
    #  # Build your program with the given configuration
    #  run: cmake --build ${{github.workspace}}/listener_program/build --config ${{env.BUILD_TYPE}}

    - name: Build
      working-directory: ${{github.workspace}}/listener_program
      run: |
        # Get the number of available cores
        CORES=$(nproc)
        # Build your program with all available cores
        cmake --build ${{github.workspace}}/listener_program/build --config ${{env.BUILD_TYPE}} -- -j$CORES

    - name: Clean Up Build Directory
      working-directory: ${{github.workspace}}/listener_program
      run: rm -rf build
      
    - name: Test
      working-directory: ${{github.workspace}}/listener_program/bin
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./UnitTests

    #- name: Benchmark
    #  working-directory: ${{github.workspace}}/listener_program/bin
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ./Benchmark

  MacOS:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: brew install fftw openblas eigen nlohmann-json libomp

      
      - name: Set environment variables for OpenMP
        run: |
          export LDFLAGS="-L/opt/homebrew/opt/libomp/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/libomp/include"
          export PATH="/opt/homebrew/opt/libomp/bin:$PATH"
          echo "CMAKE_CXX_FLAGS=-Xpreprocessor -fopenmp $CPPFLAGS" >> $GITHUB_ENV
          echo "CMAKE_EXE_LINKER_FLAGS=$LDFLAGS -lomp" >> $GITHUB_ENV
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
          echo "CPPFLAGS=$CPPFLAGS" >> $GITHUB_ENV
      
      - name: Download ONNX Runtime
        run: |
          curl -L -o onnxruntime-osx-arm64-1.19.2.tgz https://github.com/microsoft/onnxruntime/releases/download/v1.19.2/onnxruntime-osx-arm64-1.19.2.tgz
          tar -xzf onnxruntime-osx-arm64-1.19.2.tgz
      
          # Copy the headers and libraries to the standard macOS directories
          sudo mkdir -p /usr/local/include/onnxruntime /usr/local/lib
          sudo cp -r onnxruntime-osx-arm64-1.19.2/include/* /usr/local/include/onnxruntime/
          sudo cp -r onnxruntime-osx-arm64-1.19.2/lib/* /usr/local/lib/
      
      - name: Set environment variables for ONNX Runtime
        run: |
          echo "CPLUS_INCLUDE_PATH=/usr/local/include/onnxruntime" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:\$LD_LIBRARY_PATH" >> $GITHUB_ENV

          
      - name: Include submodules
        run: git submodule update --init --recursive
      
      - name: Configure CMake
        working-directory: ${{github.workspace}}/listener_program
        run: |
          mkdir -p build
          cmake -B ${{github.workspace}}/listener_program/build -S ${{github.workspace}}/listener_program \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=/usr/bin/clang \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
            -DCMAKE_CXX_FLAGS="-Xpreprocessor -fopenmp -I/opt/homebrew/opt/libomp/include" \
            -DCMAKE_EXE_LINKER_FLAGS="-L/opt/homebrew/opt/libomp/lib -lomp"
           
      #run: cmake -B ${{github.workspace}}/listener_program/build -S ${{github.workspace}}/listener_program -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      #- name: Build
      #  working-directory: ${{github.workspace}}/listener_program
      #  # Build your program with the given configuration
      #  run: cmake --build ${{github.workspace}}/listener_program/build --config ${{env.BUILD_TYPE}}

      - name: Build
        working-directory: ${{github.workspace}}/listener_program
        run: |
          # Get the number of available cores
          CORES=$(sysctl -n hw.ncpu)
          # Build your program with all available cores
          cmake --build ${{github.workspace}}/listener_program/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/listener_program/bin
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./UnitTests

     # - name: Benchmark
     #   working-directory: ${{github.workspace}}/listener_program/bin
     #   # Execute tests defined by the CMake configuration.
     #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
     #   run: ./Benchmark
