# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Add this line to support manual triggering

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      #run: sudo apt-get update && sudo apt-get install -y libfftw3-dev libblas-dev libeigen3-dev
      run: sudo apt-get update && sudo apt-get install -y libfftw3-dev libblas-dev libeigen3-dev nlohmann-json3-dev

    - name: Download ONNX Runtime
      run: |
        wget https://github.com/microsoft/onnxruntime/releases/download/v1.14.1/onnxruntime-linux-x64-1.14.1.tgz
        tar -xzf onnxruntime-linux-x64-1.14.1.tgz
        sudo cp -r onnxruntime-linux-x64-1.14.1/include/* /usr/local/include/
        sudo cp -r onnxruntime-linux-x64-1.14.1/lib/* /usr/local/lib/

    - name: Include submodules
      run: git submodule update --init --recursive

    - name: Configure CMake
      working-directory: ${{github.workspace}}/C
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/C/build -S ${{github.workspace}}/C -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      run: cmake -B ${{github.workspace}}/C/build -S ${{github.workspace}}/C -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=/usr/bin/gcc-12 -DCMAKE_CXX_COMPILER=/usr/bin/g++-12

    - name: Build
      working-directory: ${{github.workspace}}/C
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/C/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/C/bin
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./UnitTests

    - name: Benchmark
      working-directory: ${{github.workspace}}/C/bin
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./Benchmark

  MacOS:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: brew install fftw openblas eigen

      - name: Include submodules
        run: git submodule update --init --recursive

      - name: Configure CMake
        working-directory: ${{github.workspace}}/C
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/C/build -S ${{github.workspace}}/C -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        working-directory: ${{github.workspace}}/C
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/C/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/C/bin
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./UnitTests

      - name: Benchmark
        working-directory: ${{github.workspace}}/C/bin
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./Benchmark
